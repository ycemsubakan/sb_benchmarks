# #################################
# Basic training parameters for sound classification using the ESC50 dataset.
# This recipe uses the ecapa-tdnn backbone for classification.
#
# Authors:
#  * Cem Subakan 2022, 2023
#  * Francesco Paissan 2022, 2023, 2024
#  (based on the SpeechBrain UrbanSound8k recipe)
# #################################

# Seed needs to be set at top of yaml, before objects with parameters are made
seed: 1234
__set_seed: !!python/object/apply:torch.manual_seed [!ref <seed>]

# Set up folders for reading from and writing to
data_folder: !PLACEHOLDER  # e.g., /localscratch/ESC-50-master
audio_data_folder: !ref <data_folder>/audio

experiment_name: !ref dac-low
output_folder: !ref ./results/<experiment_name>/<seed>
save_folder: !ref <output_folder>/save
train_log: !ref <output_folder>/train_log.txt

add_wham_noise: False
test_only: False

wham_folder: null # Set it if add_wham_noise is True.
wham_audio_folder: !ref <wham_folder>/tr

signal_length_s: 5

# Tensorboard logs
use_tensorboard: False
tensorboard_logs_folder: !ref <output_folder>/tb_logs/

# Path where data manifest files will be stored
train_annotation: !ref <data_folder>/manifest/train.json
valid_annotation: !ref <data_folder>/manifest/valid.json
test_annotation: !ref <data_folder>/manifest/test.json

# To standardize results, UrbanSound8k has pre-separated samples into
# 10 folds for multi-fold validation
train_fold_nums: [1, 2, 3]
valid_fold_nums: [4]
test_fold_nums: [5]
skip_manifest_creation: False

ckpt_interval_minutes: 15 # save checkpoint every N min

# Training parameters
number_of_epochs: 200
batch_size: 32
lr: 0.0002
base_lr: 0.0002
max_lr: !ref <lr>
step_size: 65000


# Feature parameters
n_mels: 80
left_frames: 0
right_frames: 0
deltas: False

use_melspectra: True
use_log1p_mel: True

# Number of classes
out_n_neurons: 50

# Note that it's actually important to shuffle the data here
shuffle: True
dataloader_options:
    batch_size: !ref <batch_size>
    shuffle: !ref <shuffle>
    num_workers: 0

### Config for Tokenizer
# DAC parameters
# model_type: [16khz, 24khz, 44khz, 44khz]
# vocab_size: [1024, 1024, 1024, 1024]
# model_bitrate: [8kbps, 8kbps, 8kbps, 16kbps]
# max_num_codebooks: [12, 32, 9, 18]
# embedding_dim: [1024, 1024, 1024, 128]
model_type: 24khz
vocab_size: 1024
model_bitrate: 8kbps
num_codebooks: 2  # NOTE: must be smaller or equal to the maximum number of codebooks for the given model type
sample_rate: 24000

# Feature parameters
encoder_dim: 2048
# If set to True, the encoder_dim should be set to the dim of the tokenizer. For encodec it is 128.
init_embedding: False
freeze_embedding: False

  
# Modules
# DAC model (see https://github.com/descriptinc/descript-audio-codec)
codec: !new:speechbrain.lobes.models.discrete.dac.DAC
    model_type: !ref <model_type>
    model_bitrate: !ref <model_bitrate>
    load_pretrained: True
    tag: latest


discrete_embedding_layer: !new:custom_model.Discrete_EmbeddingLayer
    num_codebooks: !ref <num_codebooks>
    vocab_size: !ref <vocab_size>
    emb_dim: !ref <encoder_dim>
    freeze: !ref <freeze_embedding>
    init: !ref <init_embedding>

attention_mlp: !new:custom_model.AttentionMLP
    input_dim: !ref <encoder_dim>
    hidden_dim: !ref <encoder_dim>


avg_pool: !new:speechbrain.lobes.models.ECAPA_TDNN.ECAPA_TDNN
    input_size: !ref <encoder_dim>
    channels: [1024, 1024, 1024, 1024, 3072]
    kernel_sizes: [5, 3, 3, 3, 1]
    dilations: [1, 2, 3, 4, 1]
    attention_channels: 64
    lin_neurons: 192

classifier: !new:torch.nn.Linear
    in_features: 192
    out_features: !ref <out_n_neurons>


epoch_counter: !new:speechbrain.utils.epoch_loop.EpochCounter
    limit: !ref <number_of_epochs>


modules:
    classifier: !ref <classifier>
    attention_mlp: !ref <attention_mlp>
    discrete_embedding_layer: !ref <discrete_embedding_layer>
    avg_pool: !ref <avg_pool>

compute_cost: !new:speechbrain.nnet.losses.LogSoftmaxWrapper
    loss_fn: !new:speechbrain.nnet.losses.AdditiveAngularMargin
        margin: 0.2
        scale: 30

opt_class: !name:torch.optim.Adam
    lr: !ref <lr>
    weight_decay: 0.000002

lr_annealing: !new:speechbrain.nnet.schedulers.CyclicLRScheduler
    base_lr: !ref <base_lr>
    max_lr: !ref <max_lr>
    step_size: !ref <step_size>

# Logging + checkpoints
train_logger: !new:speechbrain.utils.train_logger.FileTrainLogger
    save_file: !ref <train_log>

error_stats: !name:speechbrain.utils.metric_stats.MetricStats
    metric: !name:speechbrain.nnet.losses.classification_error
        reduction: batch

checkpointer: !new:speechbrain.utils.checkpoints.Checkpointer
    checkpoints_dir: !ref <save_folder>
    recoverables:
        classifier: !ref <classifier>
        counter: !ref <epoch_counter>
        attention_mlp: !ref <attention_mlp>
        codec: !ref <codec>
        discrete_embedding_layer: !ref <discrete_embedding_layer>
